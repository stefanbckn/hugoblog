<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kalmthoutse Heide on BCKN</title>
    <link>/tags/kalmthoutse-heide/</link>
    <description>BCKN (Kalmthoutse Heide)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
      
        <managingEditor>stefan@bckn.be
          
            (Stefan)
          
        </managingEditor>
      

      
    

    
    <lastBuildDate>Fri, 08 Jan 2021 13:51:01 +0100</lastBuildDate>
    
    <atom:link href="/tags/kalmthoutse-heide/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nieuwjaarswandeling met oma &amp; opa</title>
      <link>/2021/01/08/Nieuwjaarswandeling%20met%20oma%20&amp;%20opa/</link>
      <pubDate>Fri, 08 Jan 2021 13:51:01 +0100</pubDate>
      <author>stefan@bckn.be (Stefan)</author>
      <guid>/2021/01/08/Nieuwjaarswandeling%20met%20oma%20&amp;%20opa/</guid>
      <description>&lt;p&gt;Met het nieuwe jaar komen ook de nieuwjaarsbrieven. Normaal is dit een leuk moment waar we samen tafelen en heel de familie nog eens bij elkaar is. Dankzij Corona zoeken we andere manieren, en vaak eindigen we met een wandeling.&lt;/p&gt;
&lt;p&gt;Zo ook met oma &amp;amp; opa. Eerst werd de brief nog bedeesd voorgelezen aan de deur om dan snel naar de Kalmthoutse Heide te rijden voor een leuke wandeling.&lt;/p&gt;
&lt;p&gt;Gelukkig waren we er op tijd bij want het, eens zo rustige natuurgebied, wordt stilaan overrompeld door wandelaars. We kozen voor &lt;a href=&#34;https://grensparkkalmthoutseheide.com/wandelpad-libel/&#34;&gt;wandelpad libel&lt;/a&gt; van 4,7km. Emiel heeft er van genoten al was het nog net iets te ver en duurden de laatste hectometers iets langer dan in het begin.&lt;/p&gt;




















  
  





&lt;ul class=&#34;gallery_new&#34; data-gallery-id=&#34;0001&#34; data-show-alt=&#34;false&#34;&gt;
  
      
      &lt;li class=&#34;gallery-item&#34;&gt;
        &lt;img src=&#34;http://localhost:1313/2021/01/08/Nieuwjaarswandeling%20met%20oma%20&amp;amp;%20opa/images/Emielvuurtoren.heic&#34; alt=&#34;Image 1&#34;
        class=&#39;clickable-image&#39; data-gallery-id=&#34;0001&#34; loading=&#34;eager&#34; /&gt;
      &lt;/li&gt;
    
      &lt;li class=&#34;gallery-item&#34;&gt;
        &lt;img src=&#34;http://localhost:1313/2021/01/08/Nieuwjaarswandeling%20met%20oma%20&amp;amp;%20opa/images/Emielbegrazing.jpg&#34; alt=&#34; Image 2&#34;
        class=&#39;clickable-image&#39; data-gallery-id=&#34;0001&#34; loading=&#34;eager&#34; /&gt;
      &lt;/li&gt;
    
      &lt;li class=&#34;gallery-item&#34;&gt;
        &lt;img src=&#34;http://localhost:1313/2021/01/08/Nieuwjaarswandeling%20met%20oma%20&amp;amp;%20opa/images/Emieltrager.jpg&#34; alt=&#34; Image 3&#34;
        class=&#39;clickable-image&#39; data-gallery-id=&#34;0001&#34; loading=&#34;eager&#34; /&gt;
      &lt;/li&gt;
    
  
&lt;/ul&gt;

&lt;style&gt;
  .gallery_new {
    column-count: 1;
    column-gap: 10px;
    margin: 0;
    padding: 0;
    width: 100%;
  }
  .gallery-item {
    list-style-type: none;
    display: inline-block;
    width: 100%;
    padding-bottom: 10px;
    break-inside: avoid;
  }
  .gallery-item img {
    width: 100%;
    height: auto;
    cursor: pointer;
  }


  @media (min-width: 1000px) {
      .gallery_new {
        column-count: 3;
      }
    }

  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    backdrop-filter: blur(10px);
  }

  

  .lightbox-img-container {
    position: relative;
    max-width: calc(100% - 150px);
    max-height: calc(100% - 150px);
  }

  .lightbox-img-container img {
    max-width: 100%;
    display: block;
    margin: auto;

     
    max-height: calc(100vh - 150px);
  }

  .lightbox-close-button {
    position: absolute;
    top: 5px;
    right: 5px;
    background: none;
    border: none;
    color: #ffffff;
    background-color: rgba(0, 0, 0, 0.5);
    font-size: 1em;
    width: 30px;
    height: 30px;
    line-height: 30px;
    text-align: center;
    border-radius: 4px;
    cursor: pointer;
    opacity: 0;
    transition: opacity 0.3s;
  }
  .show-close-button .lightbox-close-button {
    opacity: 1;
  }
  .lightbox-background {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-size: cover;
    background-position: center;
    filter: blur(8px);
    z-index: -1;
  }


  .lightbox-button {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background: rgba(0, 0, 0, 0.5);
      border: none;
      color: #ffffff;
      font-size: 2em;
      cursor: pointer;
      opacity: 0;
      transition: opacity 0.3s;
      padding: 0.5vw;
      border-radius: 8px;
      height: 80%;
    }

    .lightbox-button:hover {
      opacity: 1;
      background: rgba(0, 0, 0, 0.3);
    }

    .lightbox-button-left {
      left: 0px;
    }

    .lightbox-button-right {
      right: 0px;
    }

&lt;/style&gt;



&lt;script&gt;
  function initGallery(gallery) {
    gallery.addEventListener(&#39;click&#39;, function (event) {
      if (event.target.classList.contains(&#39;clickable-image&#39;)) {
        const clickedImage = event.target;
        const showAlt =  false ;
        const images = gallery.querySelectorAll(&#39;.clickable-image&#39;);

        const image = event.target;
        if (window.innerWidth &gt;= 1000) {
          
          const lightbox = document.createElement(&#39;div&#39;);
          lightbox.classList.add(&#39;lightbox&#39;);

          
          const imgContainer = document.createElement(&#39;div&#39;);
          imgContainer.classList.add(&#39;lightbox-img-container&#39;);

          
          const img = document.createElement(&#39;img&#39;);
          img.src = image.src;

          
          const caption = document.createElement(&#39;div&#39;);
          caption.classList.add(&#39;lightbox-caption&#39;);
          caption.innerHTML = image.alt;

          
          imgContainer.appendChild(img);

          if (showAlt) {
            imgContainer.appendChild(caption);
          }

          
          img.dataset.currentIndex = Array.from(images).indexOf(event.target);

          
          img.style.maxWidth = &#39;100%&#39;;

          
          const closeButton = document.createElement(&#39;button&#39;);
          closeButton.innerHTML = &#39;X&#39;;
          closeButton.classList.add(&#39;lightbox-close-button&#39;);

          
          const buttonLeft = document.createElement(&#39;button&#39;);
          buttonLeft.innerHTML = &#39;‹&#39;;
          buttonLeft.classList.add(&#39;lightbox-button&#39;, &#39;lightbox-button-left&#39;);

          const buttonRight = document.createElement(&#39;button&#39;);
          buttonRight.innerHTML = &#39;›&#39;;
          buttonRight.classList.add(&#39;lightbox-button&#39;, &#39;lightbox-button-right&#39;);

          
          imgContainer.appendChild(img);

          imgContainer.appendChild(closeButton);

          
          imgContainer.appendChild(buttonLeft);
          imgContainer.appendChild(buttonRight);

          lightbox.appendChild(imgContainer);

          
          document.body.appendChild(lightbox);

          
          function updateImage(imgIndex) {
            if (imgIndex &gt;= 0 &amp;&amp; imgIndex &lt; images.length) {
              img.src = images[imgIndex].src;
              img.alt = images[imgIndex].alt; 
              img.dataset.currentIndex = imgIndex;
              caption.innerHTML = images[imgIndex].alt; 
            }
          }

          
          imgContainer.addEventListener(&#39;click&#39;, function(event) {
            if (event.target === img) {
              const currentIndex = parseInt(img.dataset.currentIndex, 10);
              const imgRect = img.getBoundingClientRect();
              const isClickedOnLeftSide = event.clientX &lt; imgRect.left + (imgRect.width / 2);
              let newIndex;

              if (isClickedOnLeftSide) {
                newIndex = (currentIndex - 1 + images.length) % images.length;
              } else {
                newIndex = (currentIndex + 1) % images.length;
              }

              updateImage(newIndex);
            }
          });

          
          buttonLeft.addEventListener(&#39;click&#39;, function(event) {
            event.stopPropagation();
            const currentIndex = parseInt(img.dataset.currentIndex, 10);
            const newIndex = (currentIndex - 1 + images.length) % images.length;
            updateImage(newIndex);
            });
          buttonRight.addEventListener(&#39;click&#39;, function(event) {
            event.stopPropagation();
            const currentIndex = parseInt(img.dataset.currentIndex, 10);
            const newIndex = (currentIndex + 1) % images.length;
            updateImage(newIndex);
          });

          
          closeButton.addEventListener(&#39;click&#39;, function() {
            document.body.removeChild(lightbox);
          });

          
          lightbox.addEventListener(&#39;click&#39;, function(event) {
            if (event.target === this) {
              document.body.removeChild(lightbox);
            }
          });

          
          lightbox.addEventListener(&#39;mousemove&#39;, function(event) {
            const closeButtonRect = closeButton.getBoundingClientRect();
            const buffer = 50;
            const isMouseNearCloseButton =
                    event.clientX &gt;= (closeButtonRect.left - buffer) &amp;&amp;
                    event.clientX &lt;= (closeButtonRect.right + buffer) &amp;&amp;
                    event.clientY &gt;= (closeButtonRect.top - buffer) &amp;&amp;
                    event.clientY &lt;= (closeButtonRect.bottom + buffer);

            if (isMouseNearCloseButton) {
              imgContainer.classList.add(&#39;show-close-button&#39;);
            } else {
              imgContainer.classList.remove(&#39;show-close-button&#39;);
            }
          });

          lightbox.addEventListener(&#39;mousemove&#39;, function(event) {
            const buttonRectLeft = buttonLeft.getBoundingClientRect();
            const buttonRectRight = buttonRight.getBoundingClientRect();
            const distanceLeft = Math.hypot(
                    event.clientX - (buttonRectLeft.left + buttonRectLeft.width / 2),
                    event.clientY - (buttonRectLeft.top + buttonRectLeft.height / 2)
            );
            const distanceRight = Math.hypot(
                    event.clientX - (buttonRectRight.left + buttonRectRight.width / 2),
                    event.clientY - (buttonRectRight.top + buttonRectRight.height / 2)
            );

            const maxDistance = 100;
            buttonLeft.style.opacity = Math.max(0, 1 - distanceLeft / maxDistance);
            buttonRight.style.opacity = Math.max(0, 1 - distanceRight / maxDistance);
          });
        }
      }
    });
  }
document.querySelectorAll(&#39;.gallery_new&#39;).forEach(initGallery);
&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>
